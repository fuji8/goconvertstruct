// Code generated by gotypeconverter; DO NOT EDIT.
package knoq

import (
	"time"

	"github.com/traPtitech/knoQ/domain"
	"github.com/traPtitech/knoQ/infra/db"
	"gorm.io/gorm"
)

func ConvertdbEventAdminTodomainUser(src db.EventAdmin) (dst domain.User) {
	dst.Privileged = src.Model.DeletedAt.Valid
	return
}

func ConvertdbEventTagTodomainEventTag(src db.EventTag) (dst domain.EventTag) {
	dst.Tag = ConvertdbTagTodomainTag(src.Tag)
	dst.Locked = src.Locked
	return
}
func ConvertdbEventTodomainEvent(src db.Event) (dst domain.Event) {
	dst.ID = src.ID
	dst.Name = src.Name
	dst.Description = src.Description
	dst.Room = ConvertdbRoomTodomainRoom(src.Room)
	dst.Group = ConvertdbGroupTodomainGroup(src.Group)
	dst.TimeStart = src.TimeStart
	dst.TimeEnd = src.TimeEnd
	dst.CreatedBy = ConvertdbUserTodomainUser(src.CreatedBy)
	dst.Admins = make([]domain.User, len(src.Admins))
	for i := range src.Admins {
		dst.Admins[i] = ConvertdbEventAdminTodomainUser(src.Admins[i])
	}
	dst.Tags = make([]domain.EventTag, len(src.Tags))
	for i := range src.Tags {
		dst.Tags[i] = ConvertdbEventTagTodomainEventTag(src.Tags[i])
	}
	dst.AllowTogether = src.AllowTogether
	dst.Model.CreatedAt = src.Model.CreatedAt
	dst.Model.UpdatedAt = src.Model.UpdatedAt
	dst.Model.DeletedAt = new(time.Time)
	(*dst.Model.DeletedAt) = ConvertgormDeletedAtTotimeTime(src.Model.DeletedAt)
	return
}

func ConvertdbGroupAdminTodomainUser(src db.GroupAdmin) (dst domain.User) {
	dst.ID = src.UserID
	return
}
func ConvertdbGroupMemberTodomainUser(src db.GroupMember) (dst domain.User) {
	dst.ID = src.UserID
	return
}
func ConvertdbGroupTodomainGroup(src db.Group) (dst domain.Group) {
	dst.ID = src.ID
	dst.Name = src.Name
	dst.Description = src.Description
	dst.JoinFreely = src.JoinFreely
	dst.Members = make([]domain.User, len(src.Members))
	for i := range src.Members {
		dst.Members[i] = ConvertdbGroupMemberTodomainUser(src.Members[i])
	}
	dst.Admins = make([]domain.User, len(src.Admins))
	for i := range src.Admins {
		dst.Admins[i] = ConvertdbGroupAdminTodomainUser(src.Admins[i])
	}
	dst.CreatedBy = ConvertdbUserTodomainUser(src.CreatedBy)
	dst.Model.CreatedAt = src.Model.CreatedAt
	dst.Model.UpdatedAt = src.Model.UpdatedAt
	dst.Model.DeletedAt = new(time.Time)
	(*dst.Model.DeletedAt) = ConvertgormDeletedAtTotimeTime(src.Model.DeletedAt)
	dst.IsTraQGroup = src.Model.DeletedAt.Valid
	return
}
func ConvertdbRoomTodomainRoom(src db.Room) (dst domain.Room) {
	dst.ID = src.ID
	dst.Place = src.Place
	dst.Verified = src.Verified
	dst.TimeStart = src.TimeStart
	dst.TimeEnd = src.TimeEnd
	dst.Events = make([]domain.Event, len(src.Events))
	for i := range src.Events {
		dst.Events[i] = ConvertdbEventTodomainEvent(src.Events[i])
	}
	dst.CreatedBy = ConvertdbUserTodomainUser(src.CreatedBy)
	dst.Model.CreatedAt = src.Model.CreatedAt
	dst.Model.UpdatedAt = src.Model.UpdatedAt
	dst.Model.DeletedAt = new(time.Time)
	(*dst.Model.DeletedAt) = ConvertgormDeletedAtTotimeTime(src.Model.DeletedAt)
	return
}

func ConvertdbTagTodomainTag(src db.Tag) (dst domain.Tag) {
	dst.ID = src.ID
	dst.Name = src.Name
	dst.Model.CreatedAt = src.Model.CreatedAt
	dst.Model.UpdatedAt = src.Model.UpdatedAt
	dst.Model.DeletedAt = new(time.Time)
	(*dst.Model.DeletedAt) = ConvertgormDeletedAtTotimeTime(src.Model.DeletedAt)
	return
}
func ConvertdbUserTodomainUser(src db.User) (dst domain.User) {
	dst.ID = src.ID
	return
}

func ConvertgormDeletedAtTotimeTime(src gorm.DeletedAt) (dst time.Time) {
	dst = src.Time
	return
}
